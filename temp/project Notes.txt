1. create a folder for your project
2. enter into the folder and open cmd
3. create env - virtualenv env
4. activate env - env\Scripts\activate
5. You'll see the env activated
6. install django with pip
7. Create project - django-admin startproject YourProject . #if . is not added then 2 folders will be created.
8. Create App - django-admin startapp Home
9. Register the app under settings.py - add entry to INSTALLED_APPS - 'Home',
10. Run the project - python manage.py runserver
11. Use Django shell in VS code - python manage.py shell 
12. downside of using shell - you need to reload it on making changes to the code.

# Setting up shell_plus
shell plus is an advanced shell available with 'django-extensions'. 
1. install 'django-extensions' - pip install django-extensions
2. add 'django_extensions' to the INSTALLED_APPS within settings.py
3. run ipython - python manage.py shell_plus
4. run autoreload to refresh the updated modules -  
    %load_ext autoreload
    %autoreload 2
5. or run notebook - python manage.py shell_plus --notebook


#Setting up superuser
1. run makemigrations - python manage.py makemigrations 
2. migrate - python manage.py migrate
3. Create super user - python manage.py createsuperuser

#configure production and Test Settings files
https://www.youtube.com/watch?v=0WXVAMGisWs

#Building models
Go to the home app and create a package - models
Note that package always contains a __init__.py file even if empty
create a new file for model. Name it - user.py
import models - from django.db import models
create a class - User(models.Model)
add all the required fields
Note: if ImageField is used then pip install pillow
register the model in the package - init file - from .user import User
import and register the model in Apps admin.py file - admin.site.register(User)
Run the migration - python manage.py makemigrations
Run migrate - python manage.py migrate

#Setting a primary key
customerId = models.AutoField(primary_key=True, null=False)
Note that Django assigns a primary key field to a model by default hence no need to specify it.

#make the fields null by default
name = models.CharField(default=None, blank=True, null=True)

#Adding foreign keys to the model
2 approaches: 
modelField = models.ForeignKey('app_label.ModelName', on_delete=models.CASCADE)
modelField = models.ForeignKey(ModelName, on_delete=models.CASCADE) #import the model 1st
If you are adding more than 1 foreign keys to the same model then use related name attribute to diffrentiate fields.
modelField = models.ForeignKey(ModelName, related_name='fieldWithAlias')

# ALter the properties in Admin console 
This method can be used to display the proper name in place of objects
Go to Apps admin.py page
add a class as below:
class AdminProduct(admin.ModelAdmin):
    list_display = ['productName', 'productCatP', 'productCatS', 'productCatT', 'productPrice']
Note: the fields defined in the list should match the fields in model
add the class admin site register: 
admin.site.register(Product, AdminProduct)

# ALter the properties in Admin console - Replace object with a valid name
add __str__ function to the model and return the model name (variable)
fuct __str__(self): return studentName

# Serving Imanges via custom URLs 
Go to settings and declare MEDIA_URL, MEDIA_ROOT
    MEDIA_ROOT = BASE_DIR
    MEDIA_URL = '/global/downloads/'  # any abstract path should work
Go to Project URLs and import settings and static method as below
    from . import settings
    from django.conf.urls.static import static
append static method to urlpatterns
    urlpatterns = [...] + static(settings.MEDIA_URL, document_root = settings.MEDIA_ROOT)








# Installing postgres in Docker
pip install psycopg2-binary


# Testing sockets in Linux
curl --unix-socket /home/ubuntu/Projects/BusinessManager/BusinessManager.sock localhost


# Dockerising Django Project 
Ref: https://www.youtube.com/playlist?list=PLOLrQ9Pn6cazCfL7v4CdaykNoWMQymM_C
- Download docker desktop

# Add Dockerfile to the root of your project
Content:- 

FROM python:3.10-slim-buster
ENV PYTHONUNBUFFERED=1
WORKDIR /app
COPY requirements.txt .
RUN pip3 install -r requirements.txt
COPY . .
EXPOSE 8000
CMD ["python3", "manage.py", "runserver", "0.0.0.0:8000"]

# Add docker-compose.yml
Content:-

version: '3.8'

services:
  business_manager_app:
    image: business_manager_app:django_app
    build: .
    container_name: business_manager
    volumes:
      - .:/django
    ports:
      - "8000:8000"
    command: python manage.py runserver 0.0.0.0:8000


# add .dockerignore
content:-
*/env

# Run commands 
docker compose up --build


########################################

#Connect to AWS EC2:
ssh -i "prathameshh27.pem" ubuntu@ec2-13-233-199-109.ap-south-1.compute.amazonaws.com

########################################

# starting servers
sudo systemctl start gunicorn
sudo nginx -t && sudo systemctl restart nginx


########################################

# Setting up Postgress:

sudo apt-get update
sudo apt-get install postgresql postgresql-contrib

# login into the postgres user acc:
sudo -u postgres psql

# create Database:
CREATE DATABASE db_name;

# create db user:
CREATE USER myprojectuser WITH PASSWORD 'password';

# Set permissions:
ALTER ROLE myprojectuser SET client_encoding TO 'utf8';
ALTER ROLE myprojectuser SET default_transaction_isolation TO 'read committed';
ALTER ROLE myprojectuser SET timezone TO 'UTC';

# GRANT ALL PRIVILEGES ON DATABASE db_name TO myprojectuser;

# Get config file location:
show config_file;
op: /etc/postgresql/14/main/postgresql.conf

show hba_file;
op: /etc/postgresql/14/main/pg_hba.conf

# Close the console:
/q

# Making the DB accessible over the network:

# find your ip addr with 'ip addr'

# open the config in text editor:
sudo nano /etc/postgresql/14/main/postgresql.conf

# set the IP address
listen_addresses = '172.28.35.184'

# allow clients to access the db:
get your client IP addr:
sudo nano /etc/postgresql/14/main/pg_hba.conf